[{"content":"- You can think about a lot of different things all the time. Think about too many things and this becomes a serious problem, especially for those who have ADD. If you have a problem focusing on which idea to pursue, it is easy to experience the feeling of being lost. Life is happening, ideas come and go, but there is nothing for you to bring to show and tell.\n- I am not an expert in this field of study, but I do pay attention to what constitutes a ‚Äúgreat thinker‚Äù. Or maybe a better term for the people I am thinking about is ‚Äúsustainable thinker‚Äù.\n## Patience\n- A sustainable thinker is one who has, above everything else, patience. An idea will come and go, and it will not phase them. Instead, they take note of it. Often times a physical note, in a place that they frequently take their notes. There is organization to the way they take in information. Over time, these observations grow and connections are formed between new observations and older observations. Higher level concepts are synthesized. It becomes effortless to understand an entire domain of information. But it doesn‚Äôt stop there. To them this actually might be the beginning of what they consider ‚Äúhaving an idea‚Äù. They take their hypothesis wherever they go. To the best of their ability, they will try to find data to suggest what they believe isn‚Äôt true.\n## Reading\n- A sustainable thinker reads. Often times long form text like books or insightful blogs. There is a purpose to how and what they read. But a very important point here is that these people are not machines that solely exist to consume well thought out content day in/day out. No, these are still humans who enjoy memes and bingeing mindless TV. See, a patient thinker understands the bigger picture. They are human on a planet of humans. Not everyone is like them, and so everyone has something to share. Being able to interact with actual humans through colloquial phrases and honest emotional communication is vital. Honoring the give and take of time and energy that comes with existing is paramount to a sustainable thinker.\n## Align with Sustainable Thinkers\n- I try to align myself with the patient thinkers I am fortunate enough to interact with. I find it an immense privilege to be able to ask questions of these people. It makes me feel rewarded to be able to provide well researched insight of my own to my peers.\n- I probably still have too many threads of thought I pull at every day, but I think I am on to something. I kind of have this master plan for what I am working on, but I also realize it will take time. I need to be patient and continue to be present and honest with myself. Through this practice, I have felt immensely rewarded even for doing the smallest of things, like writing a single note for a given day.\n- Regardless if you are or strive to be a sustainable thinker, I wish you all the best on your journey through your own mind üôè\n","permalink":"https://breadchris.com/blog/a-sustainable-thinker-always-wins/","summary":"- You can think about a lot of different things all the time. Think about too many things and this becomes a serious problem, especially for those who have ADD. If you have a problem focusing on which idea to pursue, it is easy to experience the feeling of being lost. Life is happening, ideas come and go, but there is nothing for you to bring to show and tell.","title":"A Sustainable Thinker Always Wins"},{"content":"## SOLID principles\nThe set of five design principles for object-oriented programming that were first introduced by Robert C. Martin. These principles are intended to make software designs more understandable, flexible, and maintainable.\nIn Go, the SOLID principles can be applied as follows:\n### Single Responsibility Principle (SRP)\nExample:\n```go\ntype UserService struct {\nuserRepository UserRepository\n}\nfunc (us *UserService) CreateUser(user *User) error {\nreturn us.userRepository.Create(user)\n}\nfunc (us *UserService) GetUserByID(id int) (*User, error) {\nreturn us.userRepository.GetById(id)\n}\n```\nIn this example, the `UserService` has a single responsibility - to manage user-related operations. It does not have any knowledge of the underlying storage mechanism for the user data - this is delegated to the `UserRepository` interface.\n- ### Open/Closed Principle\n- Example:\n```go\ntype Shape interface {\nArea() float64\n}\n- type Rectangle struct {\nWidth float64\nHeight float64\n}\n- func (r *Rectangle) Area() float64 {\nreturn r.Width * r.Height\n}\n- type Circle struct {\nRadius float64\n}\n- func (c *Circle) Area() float64 {\nreturn math.Pi * c.Radius * c.Radius\n}\n```\n- In this example, we define a `Shape` interface that defines an `Area()` method. The `Rectangle` and `Circle` structs both implement this interface, and provide their own implementation of the `Area()` method. Now, if we want to add a new shape, we can simply create a new struct that implements the `Shape` interface without having to modify the existing code.\n- ### Liskov Substitution Principle\n- Example:\n```go\ntype Animal struct{}\n- func (a *Animal) Speak() string {\nreturn \u0026ldquo;Animal sound\u0026rdquo;\n}\n- type Dog struct {\nAnimal\n}\n- func (d *Dog) Speak() string {\nreturn \u0026ldquo;Woof!\u0026rdquo;\n}\n- type Cat struct {\nAnimal\n}\n- func (c *Cat) Speak() string {\nreturn \u0026ldquo;Meow!\u0026rdquo;\n}\n```\n- In this example, the `Dog` and `Cat` structs inherit from the `Animal` struct. However, they each provide their own implementation of the `Speak()` method. By adhering to the LSP, we should be able to use an instance of `Dog` or `Cat` wherever we would have used an instance of `Animal` without modifying the behavior of the program.\n- ### Interface Segregation Principle\n- Example:\n```\ntype Animal struct{}\n- func (a *Animal) Speak() string {\nreturn \u0026ldquo;Animal sound\u0026rdquo;\n}\n- type Dog struct {\nAnimal\n}\n- func (d *Dog) Speak() string {\nreturn \u0026ldquo;Woof!\u0026rdquo;\n}\n- type Cat struct {\nAnimal\n}\n- func (c *Cat) Speak() string {\nreturn \u0026ldquo;Meow!\u0026rdquo;\n}\n```\n- In this example, the `Dog` and `Cat` structs inherit from the `Animal` struct. However, they each provide their own implementation of the `Speak()` method. By adhering to the LSP, we should be able to use an instance of `Dog` or `Cat` wherever we would have used an instance of `Animal` without modifying the behavior of the program.\n- Interface Segregation Principle (ISP):\n- Example:\n```go\ntype UserRepository interface {\nCreate(user *User) error\nGetById(id int) (*User, error)\n}\n- type PasswordRepository interface {\nCreateHash(password string) (string, error)\nValidatePassword(hash, password string) error\n}\n```\nIn this example, we have two distinct interfaces - `UserRepository` and `PasswordRepository`. Each interface is specific to a particular responsibility - one for managing user-related operations, and one for managing password-related operations. This is preferable to having a single, monolithic interface that attempts to cover both responsibilities.\n- ### Dependency Inversion Principle\n- Example:\n```\ntype Animal struct{}\n- func (a *Animal) Speak() string {\nreturn \u0026ldquo;Animal sound\u0026rdquo;\n}\n- type Dog struct {\nAnimal\n}\n- func (d *Dog) Speak() string {\nreturn \u0026ldquo;Woof!\u0026rdquo;\n}\n- type Cat struct {\nAnimal\n}\n- func (c *Cat) Speak() string {\nreturn \u0026ldquo;Meow!\u0026rdquo;\n}\n```\n- In this example, the `Dog` and `Cat` structs inherit from the `Animal` struct. However, they each provide their own implementation of the `Speak()` method. By adhering to the LSP, we should be able to use an instance of `Dog` or `Cat` wherever we would have used an instance of `Animal` without modifying the behavior of the program.\n- ### Interface Segregation Principle (ISP):\n- Example:\n```go\ntype UserRepository interface {\nCreate(user *User) error\nGetById(id int) (*User, error)\n}\n- type PasswordRepository interface {\nCreateHash(password string) (string, error)\nValidatePassword(hash, password string) error\n}\n```\nIn this example, we have two distinct interfaces - `UserRepository` and `PasswordRepository`. Each interface is specific to a particular responsibility - one for managing user-related operations, and one for managing password-related operations. This is preferable to having a single, monolithic interface that attempts to cover both responsibilities.\n- ### Full Example\n- Here is an example of a Go program that applies the SOLID principles:\n```go\npackage main\nimport \u0026ldquo;fmt\u0026rdquo;\n// Single Responsibility Principle:\n// Each struct has only a single responsibility.\n// User struct represents a user in the system.\ntype User struct {\nID int\nFirstName string\nLastName string\n}\n- // UserService struct defines a service for managing users.\ntype UserService struct {\nusers []User\n}\n// AddUser adds a new user to the service.\nfunc (s *UserService) AddUser(u User) {\ns.users = append(s.users, u)\n}\n// GetUserByID returns the user with the given ID.\nfunc (s *UserService) GetUserByID(id int) User {\nfor _, u := range s.users {\nif u.ID == id {\nreturn u\n}\n}\nreturn User{}\n}\n// Open/Closed Principle:\n// The UserService is open for extension, but closed for modification.\n// We can add new functionality by implementing new interfaces,\n// rather than modifying the existing UserService.\n// UserRepository defines the interface for a user repository.\ntype UserRepository interface {\nSaveUser(u User) error\nFindUserByID(id int) (User, error)\n}\n- // UserRepositoryImpl is a concrete implementation of the UserRepository interface.\n// It uses the UserService to store and retrieve users.\ntype UserRepositoryImpl struct {\nuserService *UserService\n}\n// SaveUser saves a user to the repository.\nfunc (r *UserRepositoryImpl) SaveUser(u User) error {\nr.userService.AddUser(u)\nreturn nil\n}\n// FindUserByID finds a user with the given ID in the repository.\nfunc (r *UserRepositoryImpl) FindUserByID(id int) (User, error) {\nreturn r.userService.GetUserByID(id), nil\n}\n// Liskov Substitution Principle:\n// The UserRepositoryImpl should be substitutable for the UserRepository interface.\n// This means that we should be able to use either the interface or the concrete implementation\n// without knowing which one we are using.\n// UserController is a controller for managing users.\n// It uses a UserRepository to store and retrieve users.\ntype UserController struct {\nrepository UserRepository\n}\n- // NewUserController creates a new UserController.\nfunc NewUserController(r UserRepository) *UserController {\nreturn \u0026amp;UserController{repository: r}\n}\n// CreateUser creates a new user.\nfunc (c *UserController) CreateUser(u User) error {\nreturn c.repository.SaveUser(u)\n}\n// GetUserByID gets the user with the given ID.\nfunc (c *UserController) GetUserByID(id int) (User, error) {\nreturn c.repository.FindUserByID(id)\n}\nfunc main() {\n// Dependency Inversion Principle:\n// The UserController depends on the UserRepository interface,\n// rather than on the concrete UserRepositoryImpl.\n// This allows us to use any implementation of the UserRepository interface with the UserController.\nuserService := \u0026amp;UserService{}\nrepository := \u0026amp;UserRepositoryImpl{userService: userService}\ncontroller := NewUserController(repository)\nuser := User{ID: 1, FirstName: \u0026ldquo;John\u0026rdquo;, LastName: \u0026ldquo;Doe\u0026rdquo;}\ncontroller.CreateUser(user)\nretrievedUser, _ := controller.GetUserByID(1)\nfmt.Println(retrievedUser)\n}\n```\n- In this example, the¬†`User`¬†struct represents a user in the system and has only the data and methods that are related to a user. The¬†`UserService`¬†struct defines a service for managing users, and follows the Single Responsibility Principle by having only a single responsibility (managing users).\n- The¬†`UserRepository`¬†interface and the¬†`UserRepositoryImpl`¬†struct demonstrate the Open/Closed Principle by defining an interface that can be implemented by different types, rather than modifying the existing¬†`UserService`. The¬†`UserRepositoryImpl`¬†also satisfies the Liskov Substitution Principle by being substitutable for the¬†`UserRepository`¬†interface.\n- Finally, the¬†`UserController`¬†struct applies the Dependency Inversion Principle by depending on the¬†`UserRepository`¬†interface, rather than on a specific implementation of the interface. This allows us to use any implementation of the¬†`UserRepository`¬†interface with the¬†`UserController`. For example, a memory implementation of¬†`UserRepository`¬†could be used in unit tests and a real database implementation of¬†`UserRepository`¬†could be used in integration tests using test containers.\n- To summarize, the SOLID principles are a set of design principles for object-oriented programming that can help to make software designs more understandable, flexible, and maintainable. In Go, these principles can be applied by using structs, interfaces, and other language features to create modular, decoupled code that is easy to understand and extend.\n- Personally, following these principles have helped me to maintain a well tested, 50k+ line solo project.\n- Hope this was a useful read!\n- ## Questions\n\u0026gt; Does this still fulfill SOLID, if¬†`UserService`¬†is removed (by moving the¬†`UserService`¬†logic to¬†`UserRepository`)?\n- In this specific example it wouldn\u0026rsquo;t explicitly violate any principles, but if you were using a real database you\u0026rsquo;d want to abstract the database queries away so that data access implementation details don\u0026rsquo;t leak into your business logic.\n- To illustrate using the example above, let\u0026rsquo;s remove the¬†`UserService`¬†logic and move it to¬†`UserRepositoryImpl`:\n```go\nvar ErrUserNotFound = errors.New(\u0026ldquo;user was not found\u0026rdquo;)\n- // Open/Closed Principle:\n// The UserService is open for extension, but closed for modification.\n// We can add new functionality by implementing new interfaces,\n// rather than modifying the existing UserService.\n// UserRepository defines the interface for a user repository.\ntype UserRepository interface {\nSaveUser(u User) error\nFindUserByID(id int) (User, error)\n}\n- // UserRepositoryImpl is a concrete implementation of the UserRepository interface.\n// It uses an explicit users slice\ntype UserRepositoryImpl struct {\nusers []User\n}\n// SaveUser saves a user to the repository.\nfunc (r *UserRepositoryImpl) SaveUser(u User) error {\ns.users = append(s.users, u)\nreturn nil\n}\n// FindUserByID finds a user with the given ID in the repository.\nfunc (r *UserRepositoryImpl) FindUserByID(id int) (User, error) {\nfor _, u := range s.users {\nif u.ID == id {\nreturn u, nil\n}\n}\n- return User{}, ErrUserNotFound\n}\n```\n- This looks fine, functionality stays the same and we removed 17 lines of code, but let\u0026rsquo;s add a few things.\n- What if we want to check if a user exists before saving it? We can do so with the following:\n```go\n// SaveUser saves a user to the repository.\nfunc (r *UserRepositoryImpl) SaveUser(u User) error {\nfor _, user := range s.users {\nif u.ID == user.ID {\nreturn ErrUserWithIDExists\n}\n}\n- s.users = append(s.users, u)\nreturn nil\n}\n```\n- As our user base grows, maybe we want to add a unique¬†`username`¬†field to the¬†`User`. We can add the field to the¬†`User`¬†struct and on save check if the username is unique and doesn\u0026rsquo;t contain any bad words.\n```go\nvar ErrUsernameExists = errors.New(\u0026ldquo;user with username already exists\u0026rdquo;)\n- type User struct {\nID int\nFirstName string\nLastName string\nUsername string\n}\n- // SaveUser saves a user to the repository.\nfunc (r *UserRepositoryImpl) SaveUser(u User) error {\nif badWords.Contains(u.Username) {\nreturn ErrUsernameInvalid\n}\n- for _, user := range s.users {\nif u.ID == user.ID {\nreturn ErrUserWithIDExists\n}\n- if u.Username == user.Username {\nreturn ErrUsernameExists\n}\n}\n- s.users = append(s.users, u)\n- return nil\n}\n```\n- Now if we wanted to rewrite SaveUser using an actual database:\n```go\n// SaveUser saves a user to the repository.\nfunc (r *UserRepositoryImpl) SaveUser(u User) error {\nif badWords.Contains(u.Username) {\nreturn ErrUsernameInvalid\n}\n- users := r.db.Query(\u0026ldquo;select * from users\u0026rdquo;).ScanStructs(User{})\nfor _, user := range users {\nif u.ID == user.ID {\nreturn ErrUserWithIDExists\n}\n- if u.Username == user.Username {\nreturn ErrUsernameExists\n}\n}\n- return r.db.Exec(\u0026ldquo;insert into users(id, first_name, last_name, username) values (?, ?, ?, ?)\u0026rdquo;, u.ID, u.FirstName, u.LastName, u.Username)\n}\n```\n- Still maintainable but it could look something like this which I personally find more readable:\n```go\nfunc (r *UserRepositoryImpl) SaveUser(u User) error {\nif badWords.Contains(u.Username) {\nreturn ErrUsernameInvalid\n}\n- users := r.repository.QueryAllUsers()\nfor _, user := range users {\nif u.ID == user.ID {\nreturn ErrUserWithIDExists\n}\n- if u.Username == user.Username {\nreturn ErrUsernameExists\n}\n}\n- return r.repository.SaveUser(u)\n}\n```\n- You could refactor even further:\n```go\nfunc (r *UserRepositoryImpl) SaveUser(u User) error {\nerr := r.repository.ValidateUser(u);\nif err != nil {\nreturn err\n}\n- return r.repository.SaveUser(u)\n}\n```\n- Now it\u0026rsquo;s even more clear what the code does: validate the input then save. By abstracting the implementation away from the intention, you can read more immediately know what SaveUser is supposed to do. And when you want to know how user validation or saving the user actually works, you can navigate to the definition at that point.\n","permalink":"https://breadchris.com/blog/this-is-for-nolan/","summary":"## SOLID principles\nThe set of five design principles for object-oriented programming that were first introduced by Robert C. Martin. These principles are intended to make software designs more understandable, flexible, and maintainable.\nIn Go, the SOLID principles can be applied as follows:\n### Single Responsibility Principle (SRP)\nExample:\n```go\ntype UserService struct {\nuserRepository UserRepository\n}\nfunc (us *UserService) CreateUser(user *User) error {\nreturn us.userRepository.Create(user)\n}\nfunc (us *UserService) GetUserByID(id int) (*User, error) {","title":"This is for Nolan"},{"content":"I am a security engineer with a passion for building tools that make security easier for developers. My passion is making concepts accessible for everyone.\ndownload | chris@breadchris.com\n### LunaSec: Security Engineer 2020 - Current\nOpen-source security tooling for developers and security teams\nCritical vulnerability coverage Log4Shell, Spring4Shell, Protestware) for global security teams\nLunaTrace: \u0026ldquo;inbox-zero\u0026rdquo; for supply chain security\nLunaDefend: Zero trust input form protecting against OWASP top 10 vulnerabilities\n### Uber: Security Engineer 2016 - 2020\nAutomated event dispatching from Application Security scanning of discovered assets\nTriaging and remediation of detected vulnerabilities (Bug Bounty, scanning, auditing)\nNative Android and iOS framework for fraud signaling\nSecurity education curriculum for developers to proactively identify and remediate commonly seen vulnerabilities specific to Uber\u0026rsquo;s infrastructure\n### New York University: OSIRIS Cyber Security Lab 2014 - 2017\nCSAW CTF Lead - International CTF cyber security competition\nHack Night Lead - Introduce attendees to offensive security topics by engaging them in a hands-on curriculum\n### BAE Systems: Vulnerability Research Intern 2015 - 2016\nAudited, triaged, and exploited large C++ projects for vulnerabilities ### Northrop Grumman: Software Developer Intern 2012 - 2014\nVisualization tool for malware IoCs from Bro logs ### Projects\nDevelopment Stream: Working on the CRM that built this site\nLunaBrain: AI-assisted writing tool for capturing and expanding on ideas\nA Study in Blue: Security review of iOS, Android, and Linux Bluetooth stacks\n### Volunteering\nMontgomery County Public School High School Forensics competition developed and ran from 2015 to present\nNYU Cyber Security Awareness Week ( CSAW) organizer 2014 - 2017\nTEALS volunteer for 2018/19 and 2019/2020 school semesters for Chelan High School\n","permalink":"https://breadchris.com/resume/","summary":"I am a security engineer with a passion for building tools that make security easier for developers. My passion is making concepts accessible for everyone.\ndownload | chris@breadchris.com\n### LunaSec: Security Engineer 2020 - Current\nOpen-source security tooling for developers and security teams\nCritical vulnerability coverage Log4Shell, Spring4Shell, Protestware) for global security teams\nLunaTrace: \u0026ldquo;inbox-zero\u0026rdquo; for supply chain security\nLunaDefend: Zero trust input form protecting against OWASP top 10 vulnerabilities","title":"resume"},{"content":"### 101 Ways Dependencies Can Ruin Your Day\nslides\nDependencies are really messy and can cause a lot of problems. There are systemic problems that hackers can take advantage of.\n### How do you design LEGOs for code?\nslides\nI have played with LEGOs all my life and I have been writing code for a while now. I have been thinking about how to make code feel more like LEGOs.\n","permalink":"https://breadchris.com/talks/","summary":"### 101 Ways Dependencies Can Ruin Your Day\nslides\nDependencies are really messy and can cause a lot of problems. There are systemic problems that hackers can take advantage of.\n### How do you design LEGOs for code?\nslides\nI have played with LEGOs all my life and I have been writing code for a while now. I have been thinking about how to make code feel more like LEGOs.","title":"talks"},{"content":"I have been building a workflow engine that can route strongly-typed data through durable functions (guaranteed to execute). These functions do not need to exist in the process, they could be remote APIs, grpc servers, a p2p connection with your friend\u0026rsquo;s computer. It supports streaming of data with observables, thanks to rxgo, meaning you can create rules to map, filter, reduce data without redeployment.\nThis is the sketch I have in my head, and have been trying to implement it here. Something that I am trying to nail is the syntax for how to express these workflows. You can take a look at what I have so far in a simple test I wrote ([graph]( https://mermaid.live/edit#pako:eNp10D1rwzAQBuC\\_ctycDHY3D51KoVDaUo9WBmEdiSj64HRKCUn-e2VZpkurQRLvI8HLXXEOhnDAI-t4gtdP5aEsnkbiM\\_EAQkmgO6yx76bn7GexwcNb-de437j\\_kx8aWx-zTC\\_LDqMwadcgZFnkvR7wwWGmlKw\\_Fm51YL9\\_vEUOZ2so3UqPf\\_J-61nB6ZhAwm9eG1T6tkzNuq18BXJWVlhb4Q4dsdPWlCFdl6cK5USOFA7lajR\\_KVT-Xt7pLGG8-BkH4Uw7zNFooSery2zdGt5\\_AMgGeW0) of what is going on).\nI could use some people\u0026rsquo;s eyes and brain to help me work through how to make this feel better to code. Thanks!\n","permalink":"https://breadchris.com/thinkies/workflow-engine-syntax-isnt-making-me-happy-halp/","summary":"I have been building a workflow engine that can route strongly-typed data through durable functions (guaranteed to execute). These functions do not need to exist in the process, they could be remote APIs, grpc servers, a p2p connection with your friend\u0026rsquo;s computer. It supports streaming of data with observables, thanks to rxgo, meaning you can create rules to map, filter, reduce data without redeployment.\nThis is the sketch I have in my head, and have been trying to implement it here.","title":"Workflow Engine syntax isn't making me happy, halp"},{"content":"If someone were to talk to me about connecting my body to my mind a decade ago, I would have thought they were full of it. Regularly practicing meditation and now yoga has really made me realize how stupid you must be not to build this connection with yourself. Humans all have this incredible biological computer sitting inside their head and if you treat it as just that, a computer, it can do cool things. But in order for the computer to run at optimal capacity, there are some conditions you have to meet. Our bodies are constantly sending signals to us asking us to drink water, eat food, go for a walk. Whether we listen is another story. The western world does not put much emphasis on the development of intuition, as opposed to the cultural values of the east.\nYoga is not just a practice of stretching and strengthening your muscles, it also gives you an opportunity to develop an intuition about what your body is telling you. Can you stretch in that direction? No? What if you breath into it, what does your body tell you now. I am consistently surprised with just how much I can push myself in yoga by just focusing on the simple act of being and connecting with my body.\nBeing aware of what your body is telling you branches into all aspects of your life. You are you after all. Knowing when work can wait so that you can take time for things that feel more worth your time so that your body will thank you later is indispensable.\n","permalink":"https://breadchris.com/thinkies/connecting-your-body-and-your-mind/","summary":"If someone were to talk to me about connecting my body to my mind a decade ago, I would have thought they were full of it. Regularly practicing meditation and now yoga has really made me realize how stupid you must be not to build this connection with yourself. Humans all have this incredible biological computer sitting inside their head and if you treat it as just that, a computer, it can do cool things.","title":"Connecting your body and your mind"},{"content":"So if my calculations are right, I should be able to do the following:\nSave this post with the tag #100daystooffload\nClick publish above\nReload the site at /@breadchris\nI should be able to see this post\nThis flow is a solid step in the direction of where I want to take this tool. With a little bit of tweaking, I now have a way to publish my ideas to the Internet the way that I want to. I want them to go to my own freaking website! But damn if that isn\u0026rsquo;t too much to ask. Install wordpress? ghost? Yuck, why is this software so bloated? This has been a painstaking process in trying to make the most light weight experience for publishing your ideas, and the personal site is just the beginning. Very soon I will have this content being published to twitter. I want to take my youtube live streams, edit them here, and then share those edits. Man, this is going to be so cool.\n","permalink":"https://breadchris.com/thinkies/lets-see-if-this-works/","summary":"So if my calculations are right, I should be able to do the following:\nSave this post with the tag #100daystooffload\nClick publish above\nReload the site at /@breadchris\nI should be able to see this post\nThis flow is a solid step in the direction of where I want to take this tool. With a little bit of tweaking, I now have a way to publish my ideas to the Internet the way that I want to.","title":"let's see if this works"},{"content":"There has been a part of this code that I have been wanting to refactor for a while. Patch on patch of this form has left this code in disarray. This code is actually quite important to this site as well. It is a general application form that leverages the power of Protobuf\u0026rsquo;s expressive type system to generate a form a user can interact with. I have some ideas for where I want to take this code, but they haven\u0026rsquo;t been a priority. The form worked well enough, until it didn\u0026rsquo;t.\nI went to use the form today to try to enter in some information and I encountered a problem. If a map was referenced in the form, it would not save properly due to how the data was being serialized and sent:\n```\n{ \u0026ldquo;key\u0026rdquo;: \u0026ldquo;some key\u0026rdquo;, \u0026ldquo;value\u0026rdquo;: \u0026ldquo;some value\u0026rdquo; }\n```\nshould have been\n```\n{ \u0026ldquo;some key\u0026rdquo;: \u0026ldquo;some value\u0026rdquo; }\n```\nBecause of how this code was written, there was not a strong separation of concerns, which was a concern. Since this is a bug that is stopping a critical flow through this app, I had to resolve it. There were 2 options: tack on another patch or rewrite it sanely. When I code, I have shifted over the years to favor the former. When you can afford to write a patch, it is usually faster to implement and you can keep things moving. Just make sure you leave notes along the way, future you will thank you. Additionally, writing a patch doesn\u0026rsquo;t stop you from rewriting. It is possible that by going through the exercise of adding the patch, you are able to load enough of the code into your head to more efficiently rewrite the code.\nI started with attempting a patch. I am currently the sole developer of this codebase and so far patches to this form have been able to get me by. Reading through the code to track down the problem, I realized just how deep the problem is rooted. To patch on a solution would be more of a dirty, dirty hack to get it working. I didn\u0026rsquo;t even bother thinking all the way through how I would have gotten it working because of how complicated it seemed. The stars had aligned to give this code a proper rewrite.\nI rewrote this code to be as functional and generic as possible so that it could be reused for different purposes. It has been a while since I have as proud as I was to write this function. I felt myself tapping into some distant knowledge I had on functional ocaml as I wrote this. The solution was elegant and exactly what I needed. Opting for the rewrite was not free, it took time. The trade of time for this code was well worth taking and future me will be very grateful.\n","permalink":"https://breadchris.com/thinkies/what-is-a-good-refactoring-task/","summary":"There has been a part of this code that I have been wanting to refactor for a while. Patch on patch of this form has left this code in disarray. This code is actually quite important to this site as well. It is a general application form that leverages the power of Protobuf\u0026rsquo;s expressive type system to generate a form a user can interact with. I have some ideas for where I want to take this code, but they haven\u0026rsquo;t been a priority.","title":"What is a good refactoring task?"},{"content":"Idk what happened this morning but I went through my normal routine and then something just hit me which crippled my momentum. I have learned that listening to my body and trying to meet it where it is at in the moment vs trying to fight the feeling pays dividends over time. I try to map the feeling to a probability of what it is that I need. Often this feeling comes from not having enough water, so I drank some water and took a 20 minute nap. I went to my bed with the purpose to sleep and not to linger on my phone. Waking up from this nap felt amazing and the rest of my day started to look brighter in terms of me getting to do what I wanted to do. Everyone\u0026rsquo;s body is different, but there are foundational needs that we have to meet if we want to keep our energy up. Check in with yourself when you are feeling off to try to figure out what need your body is trying to tell you.\n","permalink":"https://breadchris.com/thinkies/today-wasnt-a-100-day/","summary":"Idk what happened this morning but I went through my normal routine and then something just hit me which crippled my momentum. I have learned that listening to my body and trying to meet it where it is at in the moment vs trying to fight the feeling pays dividends over time. I try to map the feeling to a probability of what it is that I need. Often this feeling comes from not having enough water, so I drank some water and took a 20 minute nap.","title":"Today wasn't a 100% day"},{"content":"It bothers me that more people don\u0026rsquo;t have personal sites. In my opinion, we all do interesting things. In order to communicate the interesting things that we do, we need to provide others with an immersive experience of our world. Personal sites of designers and artists attempt to capture our imagination with an elegantly simple and refreshing display of their portfolios or wild 3d graphics. It makes sense why this isn\u0026rsquo;t the norm, these sites take time. But people are willing to put in the time to build creative sites, as myspace and tumblr have shown. Yet, more restrictive social media sites, twitter, youtube, facebook, reign supreme.\nI think there is a fine balance between sites that give you all the freedom in the world to create and sites that have some requirements. Maybe the solution is something that is more hybrid. You can have building blocks of content, a timeline of tweets, videos, etc. but the content is anything that you could dream of. Like a universal file uploader _and_ formatter. Themes would give people a starting point to express themselves, and a marketplace could emerge for people to build more visually interesting ones.\nMore thoughts to come on this :)\n","permalink":"https://breadchris.com/thinkies/why-arent-there-more-personal-sites/","summary":"It bothers me that more people don\u0026rsquo;t have personal sites. In my opinion, we all do interesting things. In order to communicate the interesting things that we do, we need to provide others with an immersive experience of our world. Personal sites of designers and artists attempt to capture our imagination with an elegantly simple and refreshing display of their portfolios or wild 3d graphics. It makes sense why this isn\u0026rsquo;t the norm, these sites take time.","title":"Why aren't there more personal sites?"},{"content":"I had a call with a friend who was a hacker in the golden days of hacking. There were lots of exciting things happening in security as problems were unearthed, and solutions theorized. Over time, these problems that came up became solved. Buffers got compiler and runtime checks. SQL injection doesn\u0026rsquo;t exist when you use prepared statements. XSS doesn\u0026rsquo;t exist if you use React. The bread and butter of what hackers were poking at slowly shrunk as companies changed their development practices. This isn\u0026rsquo;t to say that security is solved. You could argue that the world is more vulnerable than it has ever been, as a whole, because of the shear amount of technology that exists. The thing that has shifted security has been the \u0026ldquo;juicy targets\u0026rdquo; requiring more and more time to hack. Less people are trying to hack banks because there are actually a number of protections that exist. These checks don\u0026rsquo;t stop someone from committing fraud, that is still super easy, but they stop attacks en masse. Commercializing security is antithetical to the core ethos of what it means to be a \u0026ldquo;hacker\u0026rdquo;. Hackers challenge the status quo. They operate where the interface meets the implementation. They will understand things that no one in their right mind should understand. Driven by purpose and meaning a hacker finds and exposes what is possible. Their \u0026ldquo;exploits\u0026rdquo; provoke questions and our lives are changed as a result. I used to think hacking was exclusive to security, but I couldn\u0026rsquo;t be any more wrong. There are so many hackers that exist in different disciplines.\n","permalink":"https://breadchris.com/thinkies/hacking-culture/","summary":"I had a call with a friend who was a hacker in the golden days of hacking. There were lots of exciting things happening in security as problems were unearthed, and solutions theorized. Over time, these problems that came up became solved. Buffers got compiler and runtime checks. SQL injection doesn\u0026rsquo;t exist when you use prepared statements. XSS doesn\u0026rsquo;t exist if you use React. The bread and butter of what hackers were poking at slowly shrunk as companies changed their development practices.","title":"Hacking Culture"},{"content":"This is the post for today, lets see if i broke something.\n","permalink":"https://breadchris.com/thinkies/just-a-test/","summary":"This is the post for today, lets see if i broke something.","title":"just a test"},{"content":"There are many things that I could be doing. I have spent a lot of time doing cyber security, I have spent a lot of time coding, maybe if I am lucky I could be a baker from all the time I have spent baking. But there is only so much time in the day. There are only so many things that you can get 10,000 hours of mastery over. And even if you have \u0026ldquo;mastered\u0026rdquo; it, have you felt good doing it? My attention wanders a lot during the day. \u0026ldquo;Why did those eggs stick the pan?\u0026rdquo;; \u0026ldquo;What if you didn\u0026rsquo;t have to write code in Javascript?\u0026rdquo;; \u0026ldquo;Maybe I want to play some guitar now.\u0026rdquo; It is hard to narrow in on what exactly I should do, let alone what I want to do. But, if you treat life like a game, you can start to come up with answers that are more \u0026ldquo;right\u0026rdquo; than others.\nYou are just gamifying your life. Your life goals are just the things in your video game that you are trying to achieve. Setting goals for yourself is quite tricky, especially at a time when there are so many goals that you could be setting. Maybe you want to do what your friend is doing, maybe you want to learn that thing you saw on Instagram, or maybe you will get into yoga this year. You can do a lot of things, but the choice is crippling. I think most people are paralyzed by the options and end up choosing none. There are no perfect life goals to set, they are different for everyone. I like to think of it as people just trying to figure out what their \u0026ldquo;art\u0026rdquo; is.\nI wanted to get really good at bass because I thought that it would be cool to be good at some form of \u0026ldquo;art\u0026rdquo;. My life didn\u0026rsquo;t feel satisfying unless I had learned some type of \u0026ldquo;art\u0026rdquo;. I was jealous of people I saw on Youtube who could lay down crazy bass licks, all the while feeling completely incapable of playing simple songs. But the jealously slowly turned into realization. These people have spent ungodly hours on this instrument to be able to play like that. Even if I had happened to have picked up this instrument when I was they did, what are the odds that I would still be playing today?\nYou don\u0026rsquo;t just need time to practice, you need energy. You need intrinsic motivation that pushes you through the point where any normal person would stop, and then you continue to break through. To me, someone who practices that is an \u0026ldquo;artist\u0026rdquo; and it applies to anything. I think people think I am crazy when I say this but I tell them anyways \u0026ldquo;a janitor could be into the art of cleaning!\u0026rdquo; And why not? Maybe they janitor with such passion that it would make an Olympian look like they perform half-heartedly. Maybe the odds are low on that one, but hopefully you see my point. I started to rethink some things I thought about myself.\nI though programming was too nerdy. I had spent a lot of my life being \u0026ldquo;too nerdy\u0026rdquo; meaning I answered questions in class or spent too long explaining things I was passionate about, I guess. And typical judgement on nerds is that they aren\u0026rsquo;t valuable to be around, maybe their existence is so oppressive that you need to beat them up, who knows. This fear of judgement led me to always distance myself somewhat from coding. It was a means to an end. The job I would do to \u0026ldquo;become successful\u0026rdquo; by working 9 to 5 at a job that I will complain about every day, and realize there is no fixing the crippling problems of the company.\nSo I made programming my art. I decided it was the thing that I would spend an ungodly amount of time thinking about and doing.\nI am so far down a rabbit hole, maybe this is somewhat coherent. If not, I am not sorry. It is your fault for reading until here without having stopped reading. Maybe you should have a better hobby than reading SHIT CONTENT. If you are still reading then you are definitely a masochist who HAS to finish what they are reading, no matter how bad this content becomes. I could start writing erotica and you would like it, wouldn\u0026rsquo;t you. Jesus stop reading this. I know how to piss you\n","permalink":"https://breadchris.com/thinkies/what-i-have-learned-about-the-problem-i-want-to-solve/","summary":"There are many things that I could be doing. I have spent a lot of time doing cyber security, I have spent a lot of time coding, maybe if I am lucky I could be a baker from all the time I have spent baking. But there is only so much time in the day. There are only so many things that you can get 10,000 hours of mastery over. And even if you have \u0026ldquo;mastered\u0026rdquo; it, have you felt good doing it?","title":"what i have learned about the problem i want to solve"},{"content":"I think there are some really cool things that you get when you dogfood the thing you are building. For those who are unfamiliar with \u0026ldquo;dogfood\u0026rdquo;, as it relates to the tech world, it means to use it yourself. I have not had much focus on the projects that I have been working on, and now that I am directly dogfooding the app, which aims to help me increase the frequency and quality of how I write, I am held accountable. If my app sucks, I will not want to use it, I will have to resort to another workflow for writing. If the app is good, then I have achieved my goal. I have tried many different workflows for writing over the years and none of them really quite \u0026ldquo;get me\u0026rdquo;. I think something like Substack has come the closest, but it is still not quite there. I want to write completely free of distractions, but when I want to connect my ideas with other people I want it to be effortless. I don\u0026rsquo;t just want to blast people with my ideas, I want to have feedback so that I can improve my writing. And beyond just writing ideas, I want the tool to help me identify prior rabbit holes I have gone down and surface them again when they are relevant. Browsing history is rich with this information, yet it is rarely referred to. Is the information not useful? I don\u0026rsquo;t think so. Someone probably found some helpful resources on \u0026ldquo;how to program\u0026rdquo; when they were looking, but they probably opened too many tabs and the window eventually closed, losing their journey.\nI want to help people discover just how awesome their minds are. We are all so incredibly interesting, we just need a way to communicate how cool we are with others. It isn\u0026rsquo;t easy to do, being a content creator is a full time job, but I think with some better tooling we can all start to share more of our ideas.\n","permalink":"https://breadchris.com/thinkies/dogfooding/","summary":"I think there are some really cool things that you get when you dogfood the thing you are building. For those who are unfamiliar with \u0026ldquo;dogfood\u0026rdquo;, as it relates to the tech world, it means to use it yourself. I have not had much focus on the projects that I have been working on, and now that I am directly dogfooding the app, which aims to help me increase the frequency and quality of how I write, I am held accountable.","title":"Dogfooding"},{"content":"This post was written by a tool that I have been building for a while, and I think this is the first feature that is remotely helpful. I am writing this post in the browser and it is then going to get saved to the database. When I click the Publish button at the top of this page, then the post will be written to a file in LogSeq where I will push it to Github and link people to it from there. Now, this is so much more effort than writing a tweet, but the big difference here is that the content that I have written is saved to my computer first, so that I retain control of it. If I wanted to later access my tweet, I would have to use twitter. What if twitter is down? What if it goes away tomorrow? These are common questions people ask about online services, but little really exists as an answer. I don\u0026rsquo;t want to build another social media site. I really just want to help people connect their ideas in a safe space before they publish them somewhere else. Maybe it does grow into something more social. I am going to continue to focus on solving small problems I have in my life with this app.\n","permalink":"https://breadchris.com/thinkies/v0-a-start/","summary":"This post was written by a tool that I have been building for a while, and I think this is the first feature that is remotely helpful. I am writing this post in the browser and it is then going to get saved to the database. When I click the Publish button at the top of this page, then the post will be written to a file in LogSeq where I will push it to Github and link people to it from there.","title":"v0: a start"}]