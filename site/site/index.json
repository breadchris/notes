[{"content":"SOLID principles The set of five design principles for object-oriented programming that were first introduced by Robert C. Martin. These principles are intended to make software designs more understandable, flexible, and maintainable.\nIn Go, the SOLID principles can be applied as follows:\nSingle Responsibility Principle (SRP) Example:\ntype UserService struct { userRepository UserRepository } func (us *UserService) CreateUser(user *User) error { return us.userRepository.Create(user) } func (us *UserService) GetUserByID(id int) (*User, error) { return us.userRepository.GetById(id) } In this example, the UserService has a single responsibility - to manage user-related operations. It does not have any knowledge of the underlying storage mechanism for the user data - this is delegated to the UserRepository interface.\nOpen/Closed Principle Example:\ntype Shape interface { Area() float64 } - type Rectangle struct { Width float64 Height float64 } - func (r *Rectangle) Area() float64 { return r.Width * r.Height } - type Circle struct { Radius float64 } - func (c *Circle) Area() float64 { return math.Pi * c.Radius * c.Radius } In this example, we define a Shape interface that defines an Area() method. The Rectangle and Circle structs both implement this interface, and provide their own implementation of the Area() method. Now, if we want to add a new shape, we can simply create a new struct that implements the Shape interface without having to modify the existing code.\nLiskov Substitution Principle Example:\ntype Animal struct{} - func (a *Animal) Speak() string { return \u0026#34;Animal sound\u0026#34; } - type Dog struct { Animal } - func (d *Dog) Speak() string { return \u0026#34;Woof!\u0026#34; } - type Cat struct { Animal } - func (c *Cat) Speak() string { return \u0026#34;Meow!\u0026#34; } In this example, the Dog and Cat structs inherit from the Animal struct. However, they each provide their own implementation of the Speak() method. By adhering to the LSP, we should be able to use an instance of Dog or Cat wherever we would have used an instance of Animal without modifying the behavior of the program.\nInterface Segregation Principle Example:\ntype Animal struct{} - func (a *Animal) Speak() string { return \u0026#34;Animal sound\u0026#34; } - type Dog struct { Animal } - func (d *Dog) Speak() string { return \u0026#34;Woof!\u0026#34; } - type Cat struct { Animal } - func (c *Cat) Speak() string { return \u0026#34;Meow!\u0026#34; } In this example, the Dog and Cat structs inherit from the Animal struct. However, they each provide their own implementation of the Speak() method. By adhering to the LSP, we should be able to use an instance of Dog or Cat wherever we would have used an instance of Animal without modifying the behavior of the program.\nInterface Segregation Principle (ISP):\nExample:\ntype UserRepository interface { Create(user *User) error GetById(id int) (*User, error) } - type PasswordRepository interface { CreateHash(password string) (string, error) ValidatePassword(hash, password string) error } In this example, we have two distinct interfaces - UserRepository and PasswordRepository. Each interface is specific to a particular responsibility - one for managing user-related operations, and one for managing password-related operations. This is preferable to having a single, monolithic interface that attempts to cover both responsibilities.\nDependency Inversion Principle Example:\ntype Animal struct{} - func (a *Animal) Speak() string { return \u0026#34;Animal sound\u0026#34; } - type Dog struct { Animal } - func (d *Dog) Speak() string { return \u0026#34;Woof!\u0026#34; } - type Cat struct { Animal } - func (c *Cat) Speak() string { return \u0026#34;Meow!\u0026#34; } In this example, the Dog and Cat structs inherit from the Animal struct. However, they each provide their own implementation of the Speak() method. By adhering to the LSP, we should be able to use an instance of Dog or Cat wherever we would have used an instance of Animal without modifying the behavior of the program.\nInterface Segregation Principle (ISP): Example:\ntype UserRepository interface { Create(user *User) error GetById(id int) (*User, error) } - type PasswordRepository interface { CreateHash(password string) (string, error) ValidatePassword(hash, password string) error } In this example, we have two distinct interfaces - UserRepository and PasswordRepository. Each interface is specific to a particular responsibility - one for managing user-related operations, and one for managing password-related operations. This is preferable to having a single, monolithic interface that attempts to cover both responsibilities.\nFull Example Here is an example of a Go program that applies the SOLID principles:\npackage main import \u0026#34;fmt\u0026#34; // Single Responsibility Principle: // Each struct has only a single responsibility. // User struct represents a user in the system. type User struct { ID int FirstName string LastName string } - // UserService struct defines a service for managing users. type UserService struct { users []User } // AddUser adds a new user to the service. func (s *UserService) AddUser(u User) { s.users = append(s.users, u) } // GetUserByID returns the user with the given ID. func (s *UserService) GetUserByID(id int) User { for _, u := range s.users { if u.ID == id { return u } } return User{} } // Open/Closed Principle: // The UserService is open for extension, but closed for modification. // We can add new functionality by implementing new interfaces, // rather than modifying the existing UserService. // UserRepository defines the interface for a user repository. type UserRepository interface { SaveUser(u User) error FindUserByID(id int) (User, error) } - // UserRepositoryImpl is a concrete implementation of the UserRepository interface. // It uses the UserService to store and retrieve users. type UserRepositoryImpl struct { userService *UserService } // SaveUser saves a user to the repository. func (r *UserRepositoryImpl) SaveUser(u User) error { r.userService.AddUser(u) return nil } // FindUserByID finds a user with the given ID in the repository. func (r *UserRepositoryImpl) FindUserByID(id int) (User, error) { return r.userService.GetUserByID(id), nil } // Liskov Substitution Principle: // The UserRepositoryImpl should be substitutable for the UserRepository interface. // This means that we should be able to use either the interface or the concrete implementation // without knowing which one we are using. // UserController is a controller for managing users. // It uses a UserRepository to store and retrieve users. type UserController struct { repository UserRepository } - // NewUserController creates a new UserController. func NewUserController(r UserRepository) *UserController { return \u0026amp;UserController{repository: r} } // CreateUser creates a new user. func (c *UserController) CreateUser(u User) error { return c.repository.SaveUser(u) } // GetUserByID gets the user with the given ID. func (c *UserController) GetUserByID(id int) (User, error) { return c.repository.FindUserByID(id) } func main() { // Dependency Inversion Principle: // The UserController depends on the UserRepository interface, // rather than on the concrete UserRepositoryImpl. // This allows us to use any implementation of the UserRepository interface with the UserController. userService := \u0026amp;UserService{} repository := \u0026amp;UserRepositoryImpl{userService: userService} controller := NewUserController(repository) user := User{ID: 1, FirstName: \u0026#34;John\u0026#34;, LastName: \u0026#34;Doe\u0026#34;} controller.CreateUser(user) retrievedUser, _ := controller.GetUserByID(1) fmt.Println(retrievedUser) } In this example, the User struct represents a user in the system and has only the data and methods that are related to a user. The UserService struct defines a service for managing users, and follows the Single Responsibility Principle by having only a single responsibility (managing users).\nThe UserRepository interface and the UserRepositoryImpl struct demonstrate the Open/Closed Principle by defining an interface that can be implemented by different types, rather than modifying the existing UserService. The UserRepositoryImpl also satisfies the Liskov Substitution Principle by being substitutable for the UserRepository interface.\nFinally, the UserController struct applies the Dependency Inversion Principle by depending on the UserRepository interface, rather than on a specific implementation of the interface. This allows us to use any implementation of the UserRepository interface with the UserController. For example, a memory implementation of UserRepository could be used in unit tests and a real database implementation of UserRepository could be used in integration tests using test containers.\nTo summarize, the SOLID principles are a set of design principles for object-oriented programming that can help to make software designs more understandable, flexible, and maintainable. In Go, these principles can be applied by using structs, interfaces, and other language features to create modular, decoupled code that is easy to understand and extend.\nPersonally, following these principles have helped me to maintain a well tested, 50k+ line solo project.\nHope this was a useful read!\nQuestions Does this still fulfill SOLID, if UserService is removed (by moving the UserService logic to UserRepository)?\nIn this specific example it wouldn\u0026rsquo;t explicitly violate any principles, but if you were using a real database you\u0026rsquo;d want to abstract the database queries away so that data access implementation details don\u0026rsquo;t leak into your business logic.\nTo illustrate using the example above, let\u0026rsquo;s remove the UserService logic and move it to UserRepositoryImpl:\nvar ErrUserNotFound = errors.New(\u0026#34;user was not found\u0026#34;) - // Open/Closed Principle: // The UserService is open for extension, but closed for modification. // We can add new functionality by implementing new interfaces, // rather than modifying the existing UserService. // UserRepository defines the interface for a user repository. type UserRepository interface { SaveUser(u User) error FindUserByID(id int) (User, error) } - // UserRepositoryImpl is a concrete implementation of the UserRepository interface. // It uses an explicit users slice type UserRepositoryImpl struct { users []User } // SaveUser saves a user to the repository. func (r *UserRepositoryImpl) SaveUser(u User) error { s.users = append(s.users, u) return nil } // FindUserByID finds a user with the given ID in the repository. func (r *UserRepositoryImpl) FindUserByID(id int) (User, error) { for _, u := range s.users { if u.ID == id { return u, nil } } - return User{}, ErrUserNotFound } This looks fine, functionality stays the same and we removed 17 lines of code, but let\u0026rsquo;s add a few things.\nWhat if we want to check if a user exists before saving it? We can do so with the following:\n// SaveUser saves a user to the repository. func (r *UserRepositoryImpl) SaveUser(u User) error { for _, user := range s.users { if u.ID == user.ID { return ErrUserWithIDExists } } - s.users = append(s.users, u) return nil } As our user base grows, maybe we want to add a unique username field to the User. We can add the field to the User struct and on save check if the username is unique and doesn\u0026rsquo;t contain any bad words.\nvar ErrUsernameExists = errors.New(\u0026#34;user with username already exists\u0026#34;) - type User struct { ID int FirstName string LastName string Username string } - // SaveUser saves a user to the repository. func (r *UserRepositoryImpl) SaveUser(u User) error { if badWords.Contains(u.Username) { return ErrUsernameInvalid } - for _, user := range s.users { if u.ID == user.ID { return ErrUserWithIDExists } - if u.Username == user.Username { return ErrUsernameExists } } - s.users = append(s.users, u) - return nil } Now if we wanted to rewrite SaveUser using an actual database:\n// SaveUser saves a user to the repository. func (r *UserRepositoryImpl) SaveUser(u User) error { if badWords.Contains(u.Username) { return ErrUsernameInvalid } - users := r.db.Query(\u0026#34;select * from users\u0026#34;).ScanStructs(User{}) for _, user := range users { if u.ID == user.ID { return ErrUserWithIDExists } - if u.Username == user.Username { return ErrUsernameExists } } - return r.db.Exec(\u0026#34;insert into users(id, first_name, last_name, username) values (?, ?, ?, ?)\u0026#34;, u.ID, u.FirstName, u.LastName, u.Username) } Still maintainable but it could look something like this which I personally find more readable:\nfunc (r *UserRepositoryImpl) SaveUser(u User) error { if badWords.Contains(u.Username) { return ErrUsernameInvalid } - users := r.repository.QueryAllUsers() for _, user := range users { if u.ID == user.ID { return ErrUserWithIDExists } - if u.Username == user.Username { return ErrUsernameExists } } - return r.repository.SaveUser(u) } You could refactor even further:\nfunc (r *UserRepositoryImpl) SaveUser(u User) error { err := r.repository.ValidateUser(u); if err != nil { return err } - return r.repository.SaveUser(u) } Now it\u0026rsquo;s even more clear what the code does: validate the input then save. By abstracting the implementation away from the intention, you can read more immediately know what SaveUser is supposed to do. And when you want to know how user validation or saving the user actually works, you can navigate to the definition at that point.\n","permalink":"https://breadchris.com/pages/this-is-for-nolan/","summary":"SOLID principles The set of five design principles for object-oriented programming that were first introduced by Robert C. Martin. These principles are intended to make software designs more understandable, flexible, and maintainable.\nIn Go, the SOLID principles can be applied as follows:\nSingle Responsibility Principle (SRP) Example:\ntype UserService struct { userRepository UserRepository } func (us *UserService) CreateUser(user *User) error { return us.userRepository.Create(user) } func (us *UserService) GetUserByID(id int) (*User, error) { return us.","title":"This is for Nolan"},{"content":"I don’t know if I personally would say that my life has been “hard”. I hear people use this to describe their life; “I have fallen on hard times”. But I don’t know, it doesn’t seem to be a relatable feeling. I have had to solve “hard” problems. Whether it is a math problem with seemingly random symbols or trying to comprehend why my parents won’t get along with each other.\nI think I would say my life has been “challenging” and I try my best to work every day to make it less challenging in certain ways so I can make room for challenges that I actually want. If something happens with a friend where we aren’t communicating well, I try my best to resolve this problem. I do this because I know I won’t be able to focus on writing the code I want. I want to be challenged by code, I don’t want to be challenged by emotions.\nFortunately for me, it seems that I have a pretty good idea about how to tackle emotions. I like to think that I have been blessed by an innate ability to see and understand patterns, as well as having environments in my life that have made me feel safe and secure. In high school I was in an incredible school program for nerds, in college I was a part of a student run cyber security lab, I dropped out of school to work at Uber with Phds and other drop outs who all had incredible passion for the work they did. Ever since high school, I have been a part of at least one group who made me feel seen for who I was.\nWhen I talk at length with my friends and peers about how they are doing, I grow more and more surprised? shocked? with every conversation. It is obviously purely qualitative, but goddamn, it seems like everyone experiences some degree of depression? Even my friends who permanently have a smile on their face, same thing, some type of perpetual sadness.\nI want to be very careful when addressing this because:\nI don’t want to seem oblivious, yes I see how much pain there is in the world Insensitive to people’s very real feelings of depression Make those reading this to feel like I am saying “haha you have depression and I don’t”. I am very sensitive to other’s feelings around me, and it makes me sad that others so close to me experience this. The thing is I just simply don’t experience what people describe when they describe depression. It is sometimes hard to get out of bed in the morning, but it has never seemed “impossible” as people have described. Days haven’t passed where it feels like I have done “nothing important”. Reflecting on my life, I realize I have unintentionally been trying to solve these feelings for others my whole life. Most namely my parent’s. Playing counselor for their shouting matches has left me with two things: an intuitive ability to speak non-confrontationally, but also a deep complex I have around trying to solve other’s problems.\nThese things have significantly affected my life and being able to address feelings in a productive way has been something you can’t even begin to put a price on. This deep vulnerability however, has been something I have struggled with, most notably in regards to close friendships and romantic ones. I have fought really hard with myself to over come this, but at the end of the day the true force that got me out of these situations is simply one thing; my support system.\nMy friends, family, co-workers, even regular people I would see at boxing or the skate park. These are the people who showed me what love and respect should look like. Just before I went through a really tough breakup I was able to visit with a number of friends and what hit me, I’m talking a real “hitting me like a brick” scenario, was that how I feel around my good friends is how I should always be feeling. I feel safe and secure around these people, I can be myself, who made me feel seen. Well then why would I ever be around someone who wasn’t making me feel that way? The math just didn’t add up.\nThere is an amazing book that I try to get people to read. It is incredibly terse so I understand if you don’t want to read it. Bowling Alone by Robert Putnam looks at how social life in the US has changed over time. The TL;DR is that groups and physical spaces where people would congregate are significantly declining as people find their social connections becoming more digital. Sitting in front of the radio listening to cowboy westerns, became watching them on TV, and now you watch a new western every month on your phone. This may seem like an obvious point, but an important one. Digital relationships are different. You can’t get hugged from across the Internet in a way that someone from a support group could do if you break down crying. Deeply human activities like exercising are limited. It becomes a lot easier to bully a faceless victim with words, which in turn forces victims into safe spaces which almost inevitably become echo chambers of emotion. I said “different” for a reason. Digital relationships are not inherently bad. I have built many relationships from various chat rooms (granted I have always made it a point to meet with them physically, eventually). The most compelling argument for how a digital presence is actually incredibly positive can be found in this documentary about VR chat.\nThis pain I discover in so many people is what is holding us back. No, I am not trying be profound here, I am just stating a fact. How can we be collectively working towards “the perfect thing”, whatever that may be, when there is so much unaccounted pain day to day? Universally embracing mental health has become so painfully obvious to me as what we should be investing in understanding, and yet the research in the field of psychology is underwhelming. My girlfriend, who studied psychology, explained to me that there was this research who proved that the results of most psychology studies up until some point were not satisfactory. This single study essentially reversed decades of work. The study of psychedelics has been something that has interested me greatly. The ability to visualize these things that hold us back sounds so incredibly powerful to me and they are actually effective at curing depression! I’ll save my thoughts on this for another post, I think I should probably end this one 🤣\nThere is only one thing I want you to walking away from this post thinking about. I want you to think about the ways that you feel seen and what you do to make others feel seen. This might seem incredibly confusing, but just think about it next time you are in a group of friends. What does someone do that makes you feel good? Do they smile at you? Remember something important about you? Do you like the inside jokes you have with each other? Perhaps you realize you actually don’t feel seen by your friends. Maybe a friend says something that makes your chest tighten. Perhaps you realize you can’t share something important about yourself with everyone because people would laugh. I really believe if we want to start healing from the “things that hold us back” we have to be conscious about these things about ourselves. Good luck out there! Life is freaking hard man 🤣\n","permalink":"https://breadchris.com/pages/what-holds-us-back/","summary":"I don’t know if I personally would say that my life has been “hard”. I hear people use this to describe their life; “I have fallen on hard times”. But I don’t know, it doesn’t seem to be a relatable feeling. I have had to solve “hard” problems. Whether it is a math problem with seemingly random symbols or trying to comprehend why my parents won’t get along with each other.","title":"What holds us back"},{"content":"TL;DR soundbite is a podcasting platform, supercharged by advancements in content discovery, to connect with your friends and your community before international influencers.\nAuthenticity is a commodity in modern day communication. When we wake up, we look at our phone, during breakfast, we look at our phone, at work when we are bored, we look at our phone, going to the bathroom? phone. Watching TV? phone. Avoiding going to bed? phone. It is the first and last thing we look at every day.\nWhat do we spend our day doing on the phone? Catching up with some celebrity, social media influencer, some random hair salon that cuts hair with fire. \u0026ldquo;The algorithm\u0026rdquo; is really good at what it does, and what it is doing is keeping you on the platform by any means necessesary. If you spend a second longer than usual fixated on a some guy lifting a lot of weight your digital content butler is going to start serving you videos of weightlifters. The faster the algorithm can glean information about your engagement with the content, the more it is able to zero in on what they can fill your limited attention span with before you get ripped away and placed in front of someone else\u0026rsquo;s visually, auditorially engaging world built more and more just for you.\nAs a developer, I am enthralled with how effective this algorithm is. And what is even more interesting is just how simple it is to build. Every major social media platform has their own form of \u0026ldquo;short form content\u0026rdquo; available for you to use and the numbers speak for themselves. Or even better, don\u0026rsquo;t look at the numbers, just start using it yourself and feel just how targeted you get by spending very little time on any platform (tiktok\u0026rsquo;s is scary good).\nIn essence, we have invented digital crack. A pure refinement on what \u0026ldquo;engagement\u0026rdquo; is. The doom sayers will tell you it is mind control, and I will generally agree. Actually, I completely agree, but I personally like to think that all mind control has its applications in humanity in a way that actually benefits us. I guess it is just the teacher in me that wants to connect with students in interesting ways and any good teacher is trying to do this every day already. Unfortunately, engagement that comes from \u0026ldquo;Answer this and get some candy\u0026rdquo; or \u0026ldquo;spend more time on the assignment and get extra credit\u0026rdquo; is not very effective or it really only will work a couple of times before the gig is up. Engaging content really comes from one\u0026rsquo;s ability to observe the student, understand their world, and then know what it is that you can say or do that will coax them into walking into your world and seeing what you have to offer. Creators on Tiktok, and the like, really can do this quite easily once they figure out the forumla (which is \u0026ldquo;shared\u0026rdquo; by other creators who they follow), and often times it is really just acting out the all too potent and powerful primal desires we have. Girls showing off their boobs, men flexing, violence, romance, comedy, etc. Well, I should really say this type of content is what will go viral. There is so much content being uploaded to these platforms it is easy to miss the true home grown creativity that people, deep down, really do crave. The unapologetic, authentic content that comes from creators who care about their content and not the views it might have. When people get the creative freedom they crave, magic is made.\nI have made an observation of my surroundings that has become undeniable to me, and I walk into every conversation I have with this thought banging around in my head. No matter who I am talking to, I am finding myself realizing that there are nuggets of valuable information that are constantly being dropped. A good conversation is one that seems to effortlessly till someone\u0026rsquo;s mind and surface a part of them that they might not have talked about in a while. With the right questions, you can guide someone through their own mind and remind them about concepts and ideas that make them, them. And someone being themselves is not an easy thing to do. There is a lot of life that is lived between then and now. All of that time in between might be filled with things that seem insignificant to the speaker, but to the listener, that might be exactly what they need to experience to alter their perception fo the world. I think almost everyone has had this experience, but think back to a classroom experience you had with a \u0026ldquo;bad teacher\u0026rdquo;. A \u0026ldquo;bad teacher\u0026rdquo;, in my opinion is simply a teacher who just couldn\u0026rsquo;t connect with you in the way that you needed to be connected with. Now, and hopefully you have had this experience, a \u0026ldquo;good teacher\u0026rdquo; is one who just always seems to say the things that make you consider what they are talking about for a moment longer. The information percolates throughout your mind and starts to alter your assumptions. Finding the right teacher for you can be incredibly difficult. Someone who can speak your language, not just English, Spanish, Chinese, etc. but the colloquial words you have come to speak so that you can feel seen for who you are, that can be difficult.\nThe case for soundbite begins and ends with a simple idea; we need to feel seen before we can learn. There is so much stimulation around us digitally that the next wave of advancements in communication are going to feel like regressions in technology, but in reality they are focused on solving the much more complicated problems that we, as humans and not just consumers, face.\n","permalink":"https://breadchris.com/pages/why-soundbite-should-exist/","summary":"TL;DR soundbite is a podcasting platform, supercharged by advancements in content discovery, to connect with your friends and your community before international influencers.\nAuthenticity is a commodity in modern day communication. When we wake up, we look at our phone, during breakfast, we look at our phone, at work when we are bored, we look at our phone, going to the bathroom? phone. Watching TV? phone. Avoiding going to bed? phone.","title":"Why soundbite should exist"}]